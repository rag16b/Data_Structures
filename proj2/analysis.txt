--------------------------------------------------------------------------------------------
Analysis of the worst-case run-time complexity of the member function reverse() of the List:
--------------------------------------------------------------------------------------------

Given the function reverse we can tell what each line's time complexity will be:

void List<T>::reverse(){
(1)	List<T>::iterator itr = begin();
(2)	List<T> temp;
(3)	while(itr != end())
(4)		temp.push_front((itr++).current->data);
(5)	*this = temp;
}

This function is 5 lines long so we will look at each line:
(1) This line calls a function that returns the first node of the list regardless of its size O(1)
(2) This line just creates a list and is a constant time method O(1)
(3) This line is a loop and is represented in the later function as 'n' (or the number of times it runs)
(4) This line calls another member function to manipulate the temporary list but is not dependent on size
     and is therefore a constant time method O(1)
(5) This line sets one list equal to another (technically calling operator=()) which is dependent on the
     size of the list and is therefore a linear time method O(N)

Given the above information we can form an equation for time:
T = O(1) + O(1) + n*O(1) + O(N)
  = O(1) + O(1) + O(N) + O(N)

Combining like terms we get:
T = O(1) + O(N)

Then, taking the fastest growing term, we can see that in Big-O notation the function-in worst-case run-time
complexity-can be represented as a linear time method: *** O(N) ***
